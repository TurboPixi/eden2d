Ideas:
- Qi as computation driver.
  - Limits to avoid runaway damage
  - Preserve progressive disclosure, feeling of discovery
  - Cost for physical side-effects.
  - Made by sacrificing entities?
  - Stored qi
  - Scarcity breeds creativity; useful driver of game
- Entities as debugging tools.
  - Some entities/properties hard to see without special tools.
- Avoiding artificial "levels"
  - Actal skill, accumulated knowledge, and possessions drive abilities.
  - Access controls; related to qi input? Skill?
- Programs
  - Simple expression language internally
  - Intentionally obscure tiled visual language in-game
    - Different expressions in different areas/cultures?
  - Expressed as tiles, on/in objects (special chunk?)
  - Expression chunk size limits program complexity
  - Maybe special programs expressed in-world
    - E.g., moving physical objects around to express powerful programs
  - Alternate media - programs as music?
- Metaprogramming
  - Programs as entities - side-effects create new programs
- Program communication ("IPC")
  - Done through physical side-effects
  - "Big" programs created 
- Aesthetic / consistency feedback
  - Avoid "weirdness" in the world
  - Consistency depends upon broad agreement, shared illusion
  - E.g., rendering a sword as an orange confuses other players, therefore unstable
  - How to gather feedback?
- NPC scripts as programs
  - Power to rewrite NPC conversationa nnd behavior
- Gather qi from external sources -- sun, minerals, ...?
  - Certain functions + entities needed to access different sources.
- Scenario: Natural world (trees, plants) is ill because of local energy siphoning magic.
  - Should be easy to express, as a script running in chunk scope that siphons qi from plants.
  - Plant metabolism driven by qi, derived from sunlight.
- Find a way to preserve the feeling of objects being rare and special.
  E.g., a book containing code that can't be easily or cheaply copied because... reasons?

World structure:
- Stacks: Multiple things at a single location.
  - Order matters; affects rendering
  - Built-in affordance for changing order
  - Objects at each layer get veto power over things going on top of them

Scripting:
- Actions move qi
- Qi is conserved
  - Though maybe consumed ("entropy") by computation to avoid perpetual motion
- No entity references across chunks? Preserve world locality.
  - Notification when reference is broken? Clear reference?
- Allocation + collections:
  - No built-in collections; only represented by chunks and entities.
  - Entities can contain entities, but only by owning chunks.
  - No closures, so you can't abuse stack frames to allocate.
  - Provide basic functional set operations?
  - Chunks as containers -- each gets a weird "spatial bag".
    - Qi as driver of chunk + entity creation, computation, creates natural limits on allocation.

Actions:
- Timer tick?
- Move, Jump? Often triggered by other procs.
- Use
- Hit
- Take
- Drop
