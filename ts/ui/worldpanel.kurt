[=> {
  WorldPanel: {
    make: (
      {
        ^: WorldPanel:impl
        player: nil
        chunk: nil
      }
    )

    impl: {
      move: (dx dy | @:chunk:perform [Actions:move @:player dx dy])

      toy-chunk: (
        -- Ew. This would be so much less foul with simple Clojure-esque ranges & stuff.
        {x:0 y:0 chunk:[World:make-chunk]}
        [do
          [while (< x 10) (do
            [-> {y:0}]
            [while (< y 10) (do
              [chunk:add-at [Blocks:WoodFloor:make] x y -0.5]
              [-> {y: [+ y 1]}]
            )]
            [-> {x: [+ x 1]}]
          )]
          chunk
        ]
      )

      make-items: (chunk0 chunk1 | do
        [chunk0:add-at [Blocks:Stairs:make chunk1 0 5 false] 1 5 0]
        [chunk1:add-at [Blocks:Stairs:make chunk0 2 5 true] 1 5 0]
        [chunk0:add-at [Items:Wand:make] 0 2 0]
        [chunk0:add-at [Items:Key:make 123] 1 0 0]
        [chunk0:add-at [Items:Key:make 456] 2 0 0]
        [chunk0:add-at [Items:Brazier:make] 4 4 0]
        [chunk0:add-at [Items:Crate:make] 5 5 0]
        [chunk0:add-at [Items:Chest:make] 6 3 0]
        [chunk0:add-at [Items:Torch:make] 3 3 0]
      )

      make-wall: (wall |
        {loc:  @:player:loc
         wall: [wall:make]
        }
        [do
          [@:chunk:add-at wall loc:x loc:y 0]

          -- TODO: It's a little gross having to manually update all the adjacent walls.
          -- Find a way to generalize this so it's automatic.
          [for-each [wall:near-with :wall] (adj | adj:wall:update adj)]
        ]
      )

      enter: (
        [?= [@:player:chunk:top-with @:player:loc:x @:player:loc:y :transports] (
          @:chunk:perform [Actions:enter prev @:player]
        )]
      )

      open: (dx dy |
        {x: [+ @:player:loc:x dx]
         y: [+ @:player:loc:y dy]}
        [@:chunk:perform [Actions:open @:player [@:player:chunk:top-at x y]]]
      )

      select-inv: (slot | @:player:player:select-inv slot)

      use-selected: (dx dy |
        {selected: [@:player:player:selected-item]
         x:        [+ @:player:loc:x dx]
         y:        [+ @:player:loc:y dy]}
        [if [!= selected nil] (
          [@:chunk:perform [Actions:use @:player selected [@:player:chunk:top-at x y]]]
        )]
      )

      selected-contains:   (?= [@:player:player:inv-target :contains] :contains :chunk)
      selected-programmed: (?= [@:player:player:inv-target :programmed] :programmed)

      take: (
        {target:     [@:player:top-with :portable]
         inv-target: [@:player:player:inv-target :portable]
         player:      @:player:player}
        [if [!= target nil] (do
          [if [!= inv-target nil] (@:put)]
          [[target:jump player:contents]:move-to player:slot 0 0]
        )]
      )

      put: (
        {loc:     @:player:loc
         target: [@:player:player:inv-target :portable]}
        [if [!= target nil] (
          [target:jump @:player:chunk]:move-to loc:x loc:y 0
        )]
      )

      save: (
        {frozen: [freeze World]}
        [=> @ {saved: frozen}]
      )

      load: (if [? @ :saved]
        (thaw @:saved)
      )
    }
  }
}]
