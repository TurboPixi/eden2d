[=> {
  WorldPanel: {
    make: (
      {
        ^: WorldPanel:impl
        player: nil
        chunk: nil
        input-state: :default
      }
    )

    impl: {
      create-chunk: (
        {chunk0: [@:toy-chunk]
         chunk1: [@:toy-chunk]}
        [do
          [chunk0:add-at [Blocks:Stairs:make chunk1 0 5 false] 1 5 0]
          [chunk1:add-at [Blocks:Stairs:make chunk0 2 5 true] 1 5 0]
          [chunk0:add-at [Items:Wand:make] 1 2 0]
          [chunk0:add-at [Items:Key:make 123] 1 1 0]
          [chunk0:add-at [Items:Key:make 456] 2 1 0]
          [chunk0:add-at [Items:Brazier:make] 4 4 0]
          [chunk0:add-at [Items:Crate:make] 5 5 0]
          [chunk0:add-at [Items:Chest:make] 6 3 0]
          [chunk0:add-at [Items:Torch:make] 3 3 0]
          chunk0
        ]
      )

      toy-chunk: (
        -- TODO: Ew. This would be so much less foul with simple Clojure-esque ranges & stuff.
        {x:0 y:0 chunk:[World:make-chunk]}
        [do
          [while (< x 10) (do
            [-> {y:0}]
            [while (< y 10) (do
              [chunk:add-at [Blocks:WoodFloor:make] x y -1]
              [-> {y: [+ y 1]}]
            )]
            [-> {x: [+ x 1]}]
          )]
          chunk
        ]
      )

      key-down: (key | switch @:input-state
        :use     (@:-key-down-use key)
        :open    (@:-key-down-open key)
        :default (@:-key-down-def key)
      )

      -key-down-use: (key | do
        [switch key
          Key:UP    (@:use-selected  0 -1)
          Key:DOWN  (@:use-selected  0  1)
          Key:LEFT  (@:use-selected -1  0)
          Key:RIGHT (@:use-selected  1  0)
        ]
        [-> @ {input-state: :default}]
      )

      -key-down-open: (key | do
        [switch key 
          Key:UP    (@:open  0 -1)
          Key:DOWN  (@:open  0  1)
          Key:LEFT  (@:open -1  0)
          Key:RIGHT (@:open  1  0)
        ]
        [-> @ {input-state: :default}]
      )

      -key-down-def: (key | switch key
        Key:UP    (@:move  0 -1)
        Key:DOWN  (@:move  0  1)
        Key:LEFT  (@:move -1  0)
        Key:RIGHT (@:move  1  0)

        Key:SPACE (@:take)
        Key:R     (@:put)
        Key:ENTER (@:enter)
        Key:Q     (-> @ {input-state: :use})
        Key:O     (-> @ {input-state: :open})

        Key:F         (@:make-wall Blocks:Bar)
        Key:G         (@:make-wall Blocks:StoneWall)
        Key:BACKSPACE (@:nuke-top)

        (key | and [>= key Key:1] [<= key Key:9]) (@:select-inv [- key Key:1])
        Key:0                                     (@:select-inv 9)
      )

      move: (dx dy | @:chunk:perform [Actions:move @:player dx dy])

      make-wall: (wall |
        {loc:   @:player:loc
         wall:  [wall:make]
         under: [@:player:top-with :solid]}
        [do
          [@:chunk:add-at wall loc:x loc:y [if ?:under (under:top) 0]]

          -- TODO: It's a little gross having to manually update all the adjacent walls.
          -- Find a way to generalize this so it's automatic.
          -- TODO: Maybe just use the update code?
          [for-each [wall:near-with :wall] (adj | adj:wall:update adj)]
        ]
      )

      nuke-top: (?= [@:player:top-with :solid] (<-:remove))

      enter: (
        {loc: @:player:loc}
        [?= [@:player:chunk:top-with loc:x loc:y :transports] (
          @:chunk:perform [Actions:enter <- @:player]
        )]
      )

      open: (dx dy |
        {x: [+ @:player:loc:x dx]
         y: [+ @:player:loc:y dy]}
        [@:chunk:perform [Actions:open @:player [@:player:chunk:top-at x y]]]
      )

      select-inv: (slot | @:player:player:select-inv slot)

      use-selected: (dx dy |
        {selected: [@:player:player:selected-item]
         x:        [+ @:player:loc:x dx]
         y:        [+ @:player:loc:y dy]}
        [if [!= selected nil] (
          [@:chunk:perform [Actions:use @:player selected [@:player:chunk:top-at x y]]]
        )]
      )

      selected-contains:   (?= [@:player:player:inv-target :contains] :contains :chunk)
      selected-programmed: (?= [@:player:player:inv-target :programmed] :programmed)

      take: (
        {target:     [@:player:top-with :portable]
         inv-target: [@:player:player:inv-target :portable]
         player:      @:player:player}
        [if [!= target nil] (do
          [if [!= inv-target nil] (@:put)]
          [[target:jump player:contents]:move-to player:slot 0 0]
        )]
      )

      put: (
        {loc:     @:player:loc
         target: [@:player:player:inv-target :portable]}
        [if [!= target nil] (
          [target:jump @:player:chunk]:move-to loc:x loc:y 0
        )]
      )

      save: (
        {frozen: [freeze World]}
        [=> @ {saved: frozen}]
      )

      load: (if [? @ :saved]
        (thaw @:saved)
      )
    }
  }
}]
