[def {
  Brazier: {
    -src: "images/tf/tiles/animated/torch.png" 
    -imgs-off: [list
      [Rendered:image -src {x: 35 y:  2 w: 11 h: 18 ax: -3 ay: 4}]
      [Rendered:image -src {x: 35 y: 22 w: 11 h: 18 ax: -3 ay: 4}]
      [Rendered:image -src {x: 35 y: 42 w: 11 h: 18 ax: -3 ay: 4}]
      [Rendered:image -src {x: 35 y: 62 w: 11 h: 18 ax: -3 ay: 4}]
    ]
    -imgs-on: [list
      [Rendered:image -src {x: 19 y:  2 w: 11 h: 18 ax: -3 ay: 4}]
      [Rendered:image -src {x: 19 y: 22 w: 11 h: 18 ax: -3 ay: 4}]
      [Rendered:image -src {x: 19 y: 42 w: 11 h: 18 ax: -3 ay: 4}]
      [Rendered:image -src {x: 19 y: 62 w: 11 h: 18 ax: -3 ay: 4}]
    ]

    make: (
      [new-ent [list
        [Located:make]
        [Solid:make 1]
        [Rendered:make Brazier:-imgs-off:0]
        {brazier: {
          on: false
          frame: 0
          perform: (ent action |
            if [= :ignite action:action] (
              set @ {on: true}
            )
          )
        }}
        [Ticks:make 1 (ent |
          -- TODO: Way too bespoke for a simple animation. Generalize this.
          {frame: [+ 1 ent:brazier:frame]}
          [do
            [if [> frame 3] (set {frame: 0})]
            [set ent:rendered {image: [[if ent:brazier:on (Brazier:-imgs-on) (Brazier:-imgs-off)] frame]}]
            [set ent:brazier {frame: frame}]
          ]
        )]
      ]]
    )
  }

  Crate: {
    -img: [Rendered:image "images/crate.png" {x: 0 y: 0}]

    make: (new-ent [list
      [Located:make]
      [Rendered:make Crate:-img]
      [Portable:make]
      [Contains:make]
      [Solid:make 1]
    ])
  }

  Wand: {
    -img: [Rendered:image "images/tf/icons/fullcolor/icons_full_16.png" {
      x: [* 3 16]
      y: [* 30 16]
    }]

    make: (new-ent [list
      [Located:make]
      [Rendered:make Wand:-img]
      [Portable:make]
      [Programmed:make]
      [Usable:make (user object target | object:programmed:run user target)]
    ])
  }
}]
