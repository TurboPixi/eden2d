[=> {
  Solid: {
    make: (height mass moveable | {
      solid: {
        ^: -impl
        -- TODO: Could simplify these with an 'opt' macro.
        height: [if ?:height (height) 1]
        mass: [if ?:mass (mass) 1]
        moveable: [if ?:moveable (moveable) false]
        solid: true
      }
    })

    -impl: {
      prepare: (ent action | cond
        -- Consider collision actions only from the perspective of the stationary entity.
        [and [= action:action :collide] (= ent action:moved)] (
          {
            -- Compute the moving/hit ents' bottom/top extents.
            moved: action:moved
            mb: moved:loc:z
            mt: [+ mb moved:solid:height]
            hit: action:hit
            hb: hit:loc:z
            ht: [+ hb hit:solid:height]
          }
          -- See if the moving object collided with this one.
          -- If so, stop it from moving.
          [if [or (and [>= mb hb] [> [- ht mb] 1]) -- leave room to step up 1m
                  (and [>= mt hb] [< mt ht])]
            -- Stop it from moving.
            (-> action {dx:0 dy:0 dz:0})
          ]
        )
      )

      perform: (ent action | cond
        [and @:moveable (= action:action :update)] (
          {below: [ent:top-with :solid]}
          [if [!= nil below] (
            {dz: [- ent:loc:z [+ below:loc:z below:solid:height]]}
            [-> ent:loc {z: [- ent:loc:z dz]}]
          )]
        )
      )
    }
  }
}]
