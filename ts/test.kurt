[
  {
    failures = 0

    expect = [expect expr | if [= expect expr]
      [|log "--[ pass ]-"]
      [|do
        [set {failures = [+ failures 1]}]
        [log "--[ fail ]-"]
        [log expect]
        [log expr]
      ]
    ]

    run = [name test | do
      [log name]
      [test]
    ]
  }

  [do
    [run "number" [|expect 42 42]]
    [run "string" [|expect "foo" "foo"]]
    [run "boolean" [|expect true true]]
    [run "quoted number" [|expect :42 :42]]
    [run "quoted string" [|expect :"foo" :"foo"]]
    [run "quoted number" [|expect :true :true]]
    [run "quoted list" [|expect :[42 54] :[42 54]]]

    [run "basic accessors" [|do
      [def env {foo = 42}]
      [expect 42 [env :foo]]
      [set {foo = 54}]
      [expect 54 foo]
    ]]

    [run "def, set, exists" [|
      {bag = {foo = 42 bar = "baz"}}
      [do
        [expect true [? bag :foo]]
        [expect 42 bag:foo]
        [set bag {foo = 54}]
        [expect 54 bag:foo]
        [expect true [? bag :bar]]
        [expect false [? bag :baz]]
      ]
    ]]

    [run "dict accessors" [|
      {thing = 42}
      [do
        [def {bag = {val = thing}}]
        [expect {val = 42} bag]
        [expect 42 [bag :val]]
      ]
    ]]

    [run "defs" [|do
      [expect false [? :foo]]
      [def {foo = 42}]
      [expect true [? :foo]]
      [expect 42 foo]

      [{foo = 42} [|do
        [def {bar = 54}]
        [expect true [? :bar]]
      ]]
      [expect false [? :bar]]
    ]]

    [run "basic blocks" [|
      {fn = [| 37]}
      [do
        [expect 37 [fn]]
        [expect 37 [{} fn]]
      ]
    ]]

    [run "basic block scoping" [|
      {fn = [| do
        [def {foo = 42}]
        [+ foo 1]
      ]}
      [expect 43 [fn]]
    ]]

    [run "explicit scoping" [|do
      [expect "foo" [{x = "foo" y = "bar"} x]]
      [expect "foo" [{x = "foo" y = "bar"} [| x]]]
      [expect 42 [{vals = :[20 22]} +]]
      [expect 42 [+ 20 22]]
    ]]

    [run "more explicit env" [|do
      [expect 42 [{x = 20 y = 22} [| + x y]]]
    ]]

    -- TODO: Explicit block env in declaration NYI.
    -- [def {
    --   env = {x = 22}
    --   fn = [y | env | + x y]
    -- }]
    -- [expect 42 [fn 20]]

    -- [run "blocks with explicit env" [|
    --   {fn2 = [y | + x y]}
    --   [do
    --     [def {env2 = {^ = env x = 23}}]
    --     [expect 43 [{^ = env2 y = 20} fn2]]
    --     [def {env3 = {x = 24}}]
    --     [expect 44 [{^ = env3 y = 20} [| + x y]]]
    --   ]
    -- ]]

    [run "nested quoting" [|do
      [expect 3 [eval :[+ 1 2]]]
      [expect 3 [+ 1 2]]
      [expect :[1 2 [+ 3 4]] :[1 2 [+ 3 4]]]
    ]]

    [run "basic do" [|
      expect "w00t"
      [do
        [def {foo = "w00t"}]
        [log foo]
        foo
      ]
    ]]

    [run "do with env" [|
      {val = 42}
      [do
        [expect 42 [if true [| val]]]
        [expect 42 [if true
          [|do
            [log "w00t"]
            val
          ]
        ]]
      ]
    ]]

    [run "block eval'd in new env" [|
      expect 43 [{foo = 42} [| [+ foo 1]]]
    ]]

    [run "expr eval'd directly in new env" [|
      expect 44 [{foo = 42} [+ foo 2]]
    ]]

    [run "Reference to outer env" [|
      {val = 42}
      [do
        [def env {
          fn = [x | do
            [def {vals = [list x val]}]
            [{vals = vals} +]
          ]
        }]
        [expect 96 [{x = 54} fn]]
      ]
    ]]

    [run "simple function (named params)" [|
      {fn = [x | [{vals = [list x 54]} +]]}
      [expect 96 [{x = 42} fn]]
    ]]

    [run "default parameters" [|
      {bump = [a val |
        {amt = [if [? :val] [| val] [| 1]]}
        [+ a amt]
      ]}
      [do
        [expect 43 [bump 42]]
        [expect 44 [bump 42 2]]
      ]
    ]]

    -- TODO: Do this with a macro; need quasi-quoting to make that go.

    [run "basic if with expressions" [|do
      [expect 42 [if true 42]]
      [expect 42 [[| if true 42]]]
      [def {foo = "bar"}]
      [expect 42  [if [= foo "bar"] 42]]
      [set {foo = "baz"}]
      [expect 43 [if [= foo "bar"] 42 43]]
    ]]

    [run "simple closure over lexical env" [|do
      [def {
        outer = 42
        fn = [x | + x outer]
      }]
      [expect 96 [fn 54]]
    ]]

    [run "closure over enclosing env, after return" [|
      {
        fn = [| do
          [def {hidden = 42}]
          [| hidden]
        ]
        cl = [fn]
      }
      [expect 42 [cl]]
    ]]

    [run "basic for-each over list" [|
      {
        list = :[0 1 2 3 4 3 2 1]
        max = 0
      }
      [do
        [for-each list [val |
          if [> val max]
            [| set {max = val}]
          ]
        ]
        [expect 4 max]
      ]
    ]]

    [run "simple singleton class" [|
      {
        OneThing = {
          val = 42
          fn = [| + @:val 1]
        }
        thing = OneThing
      }
      [do
        [expect 43 [{@ = thing} [thing:fn]]]
        [expect 43 [thing:fn]]
      ]
    ]]

    [run "class with callback to closure" [|
      {
        trampoline = [callback |
          [callback]
        ]

        Thing = {
          val = 42
          fn = [|
            trampoline [| + @:val 1]
          ]
        }
      }
      [do
        [expect 43 [{@ = Thing} [Thing:fn]]]
        [expect 43 [Thing:fn]]
      ]
    ]]

    [run "singleton internal method call" [|
      {Thing = {
        val = 42
        foo = [| [@:bar]]
        bar = [| @:val]
      }}
      [expect 42 [Thing:foo]]
    ]]

    [run "instance internal method call" [|
      {
        Thing = {
          make = [| {^ = Thing val = 42}] -- borken because evalDict() doesn't translate ^, but changing that breaks def/set.
          foo = [| [@:bar]]
          bar = [| @:val]
        }

        thing = [Thing:make]
      }
      [expect 42 [thing:foo]]
    ]]

    [run "internal env" [|
      {fn = [|
        {x = 42}
        [{x = 43} [+ env:x env:^:x]]
      ]}
      [expect 85 [fn]]
    ]]

    [run "self vs env" [|do
      [def {Thing = {
        val = 42
        fn = [| if true
          [| do
            [def {val = 43}]
            @:val
          ]
        ]
      }}]
      [expect 42 [Thing:fn]]
    ]]

    [run "test set-parent" [|do
      [def {
        Thing = {val1 = 42}
        thing = {
          val2 = 54
          fn = [| + @:val1 @:val2]
        }
      }]
      [set thing {^ = Thing}]
      [expect 96 [thing:fn]]
    ]]

    [run "rest params" [|do
      [def {
        fn = [a b ...rest | do
          [def {x = [+ a b]}]

          -- TODO: Replace this with a splat... when they're implemented.
          [for-each rest [val |
            [set {x = [+ x val]}]
          ]]
          x
        ]
      }]

      [expect 15 [{^ = env a = 1 b = 2 rest = :[3 4 5]} fn]]
      [expect 15 [fn 1 2 3 4 5]]
    ]]

    [run "list accessors" [|do
      [def {things = :[1 2 3 4 5]}]
      [expect 2 [things 1]]
      [expect 3 things:2]
      [expect 4 [things [+ 1 2]]]
    ]]

    [run "for-each callbacks" [|do
      [def {
        Comp = {
          make = [| {
            ^ = Comp
            foo = "orig"
          }]
          mutate = [| set @ {foo = "mutated"}]
        }
      }]

      -- These are cases where we ended up with inadvertent copies of 'comp',
      -- so mutations wouldn't stick.
      [def {comps = {comp = [Comp:make]}}]
      [for-each-entry comps [name value | [value:mutate]]]
      [expect "mutated" comps:comp:foo]

      [def {comps = [list [Comp:make]]}]
      [for-each comps [value | [value:mutate]]]
      [expect "mutated" comps:0:foo]
    ]]

    [run "list accessors" [|
      {thing = {foo = {bar = 42}}}
      [expect 42 [thing :foo]:bar]
    ]]

    [run "short keys" [|
      {
        val = 42
        thing = {val}
      }
      [expect 42 thing:val]
    ]]

    [run "if chain" [| do
      [def {
        foo = {
          bar = {
            baz = 42
          }
          quux = nil
          block = [p |
            if p {shazbot = @:bar:baz} nil
          ]
        }
      }]
      [expect 42 [?= 42]]
      [expect 42 [?= :foo 42]]
      [expect nil [?= :nope 42]]
      [expect nil [?= :quux]]
      [expect nil [?= :foo :quux]]
      [expect nil [?= :foo :bar :quux]]
      [expect nil [?= :foo [foo:block false] :shazbot]]
      [expect 42 [?= :foo :bar :baz]]
      [expect nil [?= :foo :bar :baz :quux]]
      [expect 42 [?= :foo {shazbot = 42} :shazbot]]
      [expect 42 [?= :foo [foo:block true] :shazbot]]
      [expect 42 [?= :foo [| foo:block true] :shazbot]]
      [expect 42 [?= :foo [| env:block true] :shazbot]]
    ]]

    -- Wrap up.
    [log "--[ complete ]--"]
    [if [= 0 failures]
      [| log "all passed"]
      [| log failures "failures"]
    ]
  ]
]
