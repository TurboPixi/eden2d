[def :Player {
  make: [chunk | do
    [def :inv-chunk [make-chunk]]
    [def :ent [[chunk:make-ent] "player"]]

    [def :player {
      slot: 0
      contents: inv-chunk
      cursor-ent: [[inv-chunk:make-ent] "cursor"]
    }]

    -- TODO: It's weird we have to do this here but doing it earlier
    --   interferes with the object's lcoal scope during evaluation.
    [def player:parent ent]
    [set [ent:comps]:player player]
    ent
  ]

  contents: [ent | do
    [def :player [[ent:comps]:player]]
    [if [? :player] [|player:contents]]
  ]

  move: [ent dx dy | do
    [[ent:move-to] [+ [ent:x] dx] [+ [ent:y] dy]]
  ]

  -- TODO: validate that there's actually something to follow.
  follow: [ent | do
    [def :portal [[ent:top-with] :portal]]
    [def :x [portal:portalx]]
    [def :y [portal:portaly]]
    [[ent:jump] [portal:portalchunk]]
    [[ent:move-to] x y]
  ]

  -- TODO: Validate ent exists.
  take: [ent | do
    [def :player [[ent:comps]:player]]
    [def :target [[ent:top-with] :portable]]
    [[[[target:jump] [player:contents]]:move-to] [player:slot] 0]
  ]

  -- TODO: Validate ent exists.
  put: [ent | do
    [def :player [[ent:comps]:player]]
    [def :target [[[player:contents]:top-with] [player:slot] 0 :portable]]
    [[[[target:jump] [ent:chunk]]:move-to] [ent:x] [ent:y]]
  ]

  create: [ent type | do
    [def :player [[ent:comps]:player]]
    [[[[[player:contents]:make-ent] type]:move-to] [player:slot] 0]
  ]

  -- TODO: Validate slot range
  select: [ent slot | do
    [def :player [[ent:comps]:player]]
    [set player:slot slot]
    [[[player:cursor-ent]:move-to] slot 0]
  ]
}]
