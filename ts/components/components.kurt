[def {
  -- Entities with the Portable component can be picked up.
  PortableComp: {
    make: ({portable: true})
  }

  TickerComp: {
    make: [freq block | {ticker: {freq block}}]
  }

  UsableComp: {
    make: [use | {usable: {^: UsableComp:impl use}}]

    impl: {
      perform: [ent action |
        if [= action:action :use]
           (@:use ent action:user action:target)
      ]
    }
  }

  ContainerComp: {
    make: [chunk | {container: {chunk}}]
  }

  ProgrammedComp: {
    make: [program-chunk | {
      programmed: {
        ^: ProgrammedComp:impl
        program: program-chunk
      }
    }]

    impl: {
      block: [ent user |
        -- Fake placeholder code. Should come from program chunk.
        -- [user:chunk:add [Crate:make]]:move-to user:loc:x user:loc:y
        [?= [user:near-with :brazier] (
          user:chunk:perform [action-ignite ent prev]
        )]
      ]
    }
  }

  -- Entities with the portal component transport an entity to another location/chunk.
  PortalComp: {
    make: [target-chunk target-x target-y | {portal: {
      ^: PortalComp:impl
      target-chunk target-x target-y
    }}]

    impl: {
      perform: [ent action |
        if [= action:action :enter]
        (do
          [action:ent:jump @:target-chunk]
          [action:ent:move-to @:target-x @:target-y]
        )
      ]
    }
  }

  SolidComp: {
    make: [mass | {solid: {solid: true mass}}]
  }

  KeyComp: {
    make: [code | {key: {code}}]
  }

  -- Door component.
  DoorComp: {
    make: [code closed-img open-img | {door: {
      ^: DoorComp:impl
      open: false
      code closed-img open-img
    }}]

    impl: {
      prepare: [ent action | if [= action:action :open] (
        if [!= [?= action :opener :player (prev:selected-item) :key :code] @:code]
          (set action {cancel: true})
      )]

      perform: [ent action |
        if [and [= action:action :open] [! action:cancel]] (do
          [set @ {open: [! @:open]}]
          [set ent:render {image: [if @:open @:open-img @:closed-img]}]
          [if [? ent :solid] (
            set ent:solid {solid: [! ent:solid:solid]}
          )]
        )
      ]
    }
  }
}]
