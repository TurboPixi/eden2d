-[
Principles:
- Simplest possible syntax: made of lists & dicts.
  - All combinations of list + dict should be syntactically valid programs.
  - No keywords (but builtins like true & false)
- No distinction between code + data
  - Lisp-style quote/eval to treat them as equivalent.
- Symbols are values, just like strings, numbers, etc.
- Eval all the things: If it's possible to eval it, do. Maximize dynamic insanity.
- Error early: Don't silently coerce things. Broken programs should fail quickly.
- Blocks are nothing special: Just lists that follow the right structure.
- TODO: Something about env, dicts, params...


TODO:
- Some kind of keyword-like "full quote" (that self-evals, like Clojure keywords)
  E.g., {foo: /[+ 1 2]] => full quoted list. 
        foo             => /[+ 1 2]
        [foo]           => /[+ 1 2]
        \foo            =>  [+ 1 2]
        [\foo]          =>  3
- Try/catch?
- Affordance to resolve resolution ambiguity with parent/child envs.
- Allow dict entries without ' = ' spacing.
- Splats...
- single-quote symbols
- Resolve def/set ambiguity. nil =?= missing?
- Something about accessor functions? [ent :value] vs [[ent :value]]
  Also consider something like [obj:set :foo 42] or [obj:set-foo 42] or [obj:set {foo = 42}]
- Mixed env + positional args
- Explore macros, quasi-quoting
  Making this work will require dynamic dict keys
  Should change format to { :key = ... } to rationalize this
- Backquote string literals?
- Read caller? (?= native impl uses this right now)
]-

-[ Primitive values ]-
  "a str"                 -- "a str"
  42                      -- 42
  6.02e23                 -- 6.02e23
  true                    -- true

-[ Symbols & quoting ]-
  :sym                    -- symbol

-[ Lists & dicts ]-
  :[expr ...]             -- literal list
  :{sym:expr ...}         -- literal dict (TODO: Allow 'sym' to be eval'd?)
  [expr ...]              -- eval'd list
  {sym:expr ...}          -- eval'd dict

-[ Evaluation ]-
  sym                     -- default env value at sym
  [:sym]                  -- (same -- shorthand for [env :sym])
  [{env} expr]            -- expr -- evaluate expr in env (also gives [env:expr] as accessor)
  [{env} block]           -- expr -- evaluate block in env
  [{env = ...} block]     -- expr -- evaluate block in env, with explicit environment
  [block expr*]           -- rewrite to [{p0:expr0 p1:expr1 ...} expr] -- bind expr* to params, in order

-[ Definition ]-
  [def (env) {sym = expr ...}]  -- define :sym in env
  [set (env) {sym = expr ...}]  -- set :sym in env (if defined)
  [? (env):sym]                 -- true if :sym is defined in env

-[ Blocks ]-
  [x y | + x y]           -- block with two params
  [x | + x 1]             -- block with one param
  [| + 1 2]               -- block with no params
  (+ 1 2)                 -- (shorthand) block with no params
  [x y | {env} | + x y]   -- (TODO) block with two params, with an explicit environment

-[ Block definition ]-
[def :add [a b | + a b]]
[def :+ [x y | native)]

-[ Rest params ]-
[def :block [a b ...rest | do
  [log a] [log b] [log rest]
]]
[block 1 2 3 4 5]                       -- logs 1 / 2 / [3 4 5]
[{a = 1 b = 2 ...rest = [3 4 5]} block] -- ditto

-[ Expressions with env ]-
[{a = 6} [+ a 7]]
-- 13

-[ Block evaluation ]-
[{a = 6 b = 7} add]
-[
  [{a = 6 b = 7} [a b| [{x = a y = b} +]]]  -- named args as prefix env
  [{a = 6 b = 7}       [{x = a y = b} +]]   --   merged with formal parameters
  [                     {x = 6 y = 7} +]    --   and evaluated with the body
                        13
]-

-[ With positional args ]-
[add 6 7]
-[
  [[a b|               [{x = a y = b} +]] 6 7]  -- transform positional args
  [{a = 6 b = 7} [a b| [{x = a y = b} +]]    ]  --   into named args
  [{a = 6 b = 7}       [{x = a y = b} +]]       --   and continue as usual
                       [{x = 6 y = 7} +]
                       13
]-

-[ Closure ]-
[def :greatest ([list]
  [do
    [def :max 0]
    [for-each list ([val]
      [if [> max val] (set :max val)]
    )]
  ]
)]

-[ Dict with parent ]-
[def {parent = {
  foo = 42
}}]
[def {child = {
  ^ = parent
  bar = 54
}}]
[+ child:foo child:bar]
